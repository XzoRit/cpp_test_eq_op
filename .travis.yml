dist: trusty
sudo: false
language: cpp

matrix:
  include:
    # gcc-9
    - env: CC_COMPILER=gcc-9 CXX_COMPILER=g++-9 TOOLSET=gcc-9 BOOST_VERSION=1.72.0 CMAKE_OPTIONS="-DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_STANDARD_REQUIRED=ON"
      addons: { apt: { packages: ["g++-9"], sources: ["ubuntu-toolchain-r-test"] } }
    # clang-7
    - env: CC_COMPILER=clang-7 CXX_COMPILER=clang++-7 TOOLSET=clang-7 BOOST_VERSION=1.72.0 CMAKE_OPTIONS="-DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_STANDARD_REQUIRED=ON"
      addons: { apt: { packages: ["clang-7"], sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-trusty-7"] } }

install:
  ############################################################################
  # All the dependencies are installed in ${HOME}/deps/
  ############################################################################
  - DEPS_DIR="${HOME}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  ############################################################################
  # Setup default versions and override CXX set by Travis if needed
  ############################################################################
  - if [[ "${CC_COMPILER}" != "" ]]; then export CC=${CC_COMPILER}; fi
  - if [[ "${CXX_COMPILER}" != "" ]]; then export CXX=${CXX_COMPILER}; fi
  - ${CC} --version
  - ${CXX} --version

  ############################################################################
  # Install Boost headers
  ############################################################################
  - |
    if [[ "${BOOST_VERSION}" != "" ]]; then
      BOOST_DIR=${DEPS_DIR}/boost-${BOOST_VERSION}
      if [[ "${BOOST_VERSION}" == "trunk" ]]; then
        BOOST_URL="http://github.com/boostorg/boost.git"
        travis_retry git clone --depth 1 --recursive ${BOOST_URL} ${BOOST_DIR} || exit 1
        (cd ${BOOST_DIR} && ./bootstrap.sh && ./b2 headers) || exit 1
      else
        BOOST_URL="https://dl.bintray.com/boostorg/release/${BOOST_VERSION}/source/boost_${BOOST_VERSION//\./_}.tar.gz"
        mkdir -p ${BOOST_DIR}
        { travis_retry wget -O - ${BOOST_URL} | tar --strip-components=1 -xz -C ${BOOST_DIR}; } || exit 1
      fi
      CMAKE_OPTIONS+=" -DBOOST_ROOT=${BOOST_DIR}"
    fi

  ############################################################################
  # Install a recent CMake
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v3.16/cmake-3.16.4-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      brew install cmake || brew upgrade cmake
    fi
  - cmake --version

  ############################################################################
  # Install b2
  ############################################################################
  - (cd ${BOOST_DIR}/tools/build && ./bootstrap.sh && ./b2 install --prefix=${DEPS_DIR}/b2)
  - export PATH=${DEPS_DIR}/b2/bin:${PATH}
  - export BOOST_BUILD_PATH=${BOOST_DIR}/tools/build
  - export BOOST_ROOT=${BOOST_DIR}
  - b2 --version || true # b2 --version returns 1

  ############################################################################
  # Install libc++ and libc++abi if needed
  ############################################################################
  - |
    if [[ "${CXX%%+*}" == "clang" ]]; then
      if   [[ "${CXX}" == "clang++-3.5" ]]; then LLVM_VERSION="3.5.2";
      elif [[ "${CXX}" == "clang++-3.6" ]]; then LLVM_VERSION="3.6.2";
      elif [[ "${CXX}" == "clang++-3.7" ]]; then LLVM_VERSION="3.7.1";
      elif [[ "${CXX}" == "clang++-3.8" ]]; then LLVM_VERSION="3.8.1";
      elif [[ "${CXX}" == "clang++-3.9" ]]; then LLVM_VERSION="3.9.1";
      elif [[ "${CXX}" == "clang++-4" ]]; then LLVM_VERSION="4.0.1";
      elif [[ "${CXX}" == "clang++-5" ]]; then LLVM_VERSION="5.0.1";
      elif [[ "${CXX}" == "clang++-7" ]]; then LLVM_VERSION="7.1.0";
      fi

      LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
      LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
      LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"

      mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
      travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm || exit 1
      travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxx || exit 1
      travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxxabi || exit 1
      (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_DIR}/llvm/install) || exit 1
      (cd llvm/build/projects/libcxx && make install -j2) || exit 1
      (cd llvm/build/projects/libcxxabi && make install -j2) || exit 1

      export CXXFLAGS="-isystem ${DEPS_DIR}/llvm/install/include/c++/v1"
      export LDFLAGS="-L ${DEPS_DIR}/llvm/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm/install/lib"
    fi

before_script:
  ############################################################################
  # Build needed boost libs
  # This is needed for the cmake build which utilizes find_package to find
  # prebuilt versions of boost libs
  # The b2 build will build the libs needed since a build dependency is
  # formulated in the according jamfiles
  ############################################################################
  - cd ${BOOST_DIR}
  - |
    if [[ "${LDFLAGS}" == "" ]]; then
      b2 --with-program_options --with-test toolset=${TOOLSET} cxxflags="-std=c++17 ${CXXFLAGS}" || exit 1
    else
      b2 --with-program_options --with-test toolset=${TOOLSET} cxxflags="-std=c++17 ${CXXFLAGS}" linkflags="${LDFLAGS}" || exit 1
    fi

  ############################################################################
  # Go back to the root of the project and setup the build directory
  ############################################################################
  - cd "${TRAVIS_BUILD_DIR}"

  ############################################################################
  # cmake
  ############################################################################
  - mkdir build_cmake
  - cmake -B ./build_cmake -S ./ ${CMAKE_OPTIONS}

  ############################################################################
  # b2
  ############################################################################
  - mkdir build_boost

script:
  - cd "${TRAVIS_BUILD_DIR}"

  ############################################################################
  # Check for common formatting errors.
  ############################################################################
  - sources=($(find lib app -name "*.hpp" -or -name "*.cpp"))
  - LANG=POSIX grep '[^[:print:][:cntrl:]]' "${sources[@]}"; [[ $? == 1 ]] || exit 1 # Non-ASCII character
  - LANG=POSIX grep $'\r'                   "${sources[@]}"; [[ $? == 1 ]] || exit 1 # '\r' (CR) character
  - LANG=POSIX grep $'\t'                   "${sources[@]}"; [[ $? == 1 ]] || exit 1 # Tab character
  - LANG=POSIX grep '[[:blank:]]$'          "${sources[@]}"; [[ $? == 1 ]] || exit 1 # Trailing whitespace

  ############################################################################
  # Build with cmake execute tests with ctest
  ############################################################################
  - cd "${TRAVIS_BUILD_DIR}"
  - cmake --build ./build_cmake
  - (cd build_cmake && ctest --output-on-failure)

  ############################################################################
  # Build and execute tests with b2
  ############################################################################
  - cd "${TRAVIS_BUILD_DIR}"
  - |
    if [[ "${LDFLAGS}" == "" ]]; then
      b2 --build-dir=./build_boost toolset=${TOOLSET} cxxflags="-std=c++17 ${CXXFLAGS}" || exit 1
    else
      b2 --build-dir=./build_boost toolset=${TOOLSET} cxxflags="-std=c++17 ${CXXFLAGS}" linkflags="${LDFLAGS}" || exit 1
    fi
